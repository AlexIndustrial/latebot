use teloxide::{
    prelude::*,
    types::{InlineKeyboardButton, InlineKeyboardMarkup, MessageEntityKind},
    RequestError,
};

use mongodb::bson::DateTime;
use crate::database_actions::DatabaseService;

pub async fn message_handler(
    bot: Bot,
    msg: Message,
    target_name: String,
    ping_user: String,
    database_service: DatabaseService,
    notification_chat_id: i64,
) -> Result<(), RequestError> {
    match msg.text() {
        Some("/start") => {
            let keyboard = InlineKeyboardMarkup::new(vec![
                vec![
                    InlineKeyboardButton::callback("‚úÖ –û–ø–æ–∑–¥–∞–ª", "late"),
                    InlineKeyboardButton::callback("‚ùå –ù–µ –æ–ø–æ–∑–¥–∞–ª", "unlate"),
                ],
                vec![InlineKeyboardButton::callback("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats")],
            ]);

            bot.send_message(
                msg.chat.id,
                format!(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–π!\n\n\
                üïí –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –æ–ø–æ–∑–¥–∞–ª –ª–∏ —Å–µ–≥–æ–¥–Ω—è {}.\n\n\
                –ö–æ–º–∞–Ω–¥—ã:\n\
                /late - –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ\n\
                /unlate - –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è\n\
                /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\
                /get_chat_id - –ø–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n\
                /get_user_id @username - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\
                /my_id - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID\n\n\
                ‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!",
                    target_name
                ),
            )
            .reply_markup(keyboard)
            .await?;
        }
        Some("/late") | Some("/unlate") => {
            let user_id = msg.from.as_ref().unwrap().id;
            let _username = msg
                .from
                .as_ref()
                .unwrap()
                .username
                .clone()
                .unwrap_or_else(|| "anonymous".to_string());
            let is_late = msg.text() == Some("/late");

            let _ = database_service.check_today_document().await;

            match database_service.vote(user_id.0 as i64, is_late).await {
                Ok(_) => {
                    let vote_type = if is_late {
                        "–∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ"
                    } else {
                        "–ø—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è"
                    };
                    bot.send_message(
                        msg.chat.id,
                        format!("‚úÖ –í–∞—à –≥–æ–ª–æ—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", vote_type),
                    )
                    .await?;

                    if is_late {
                        if let Ok(total_late_days) = database_service.check_today_document().await {
                            if total_late_days.votes_yes.len() % 5 == 0 && notification_chat_id != 0
                            {
                                bot.send_message(
                                    ChatId(notification_chat_id),
                                    format!("üéâ {} –ß–µ–ª–æ–≤–µ–∫ —Å–æ–æ–±—â–∏–ª–∏, —á—Ç–æ {}({}) –æ–ø–æ–∑–¥–∞–ª! üéâüéâüéâüéâüéâ –î–∞–≤–∞–π—Ç–µ –µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–∏–º! üéâüéâüéâüéâüéâ ", total_late_days.votes_yes.len(),  target_name,ping_user,)
                                ).await?;
                            }
                        }
                    }
                }
                Err(e) => {
                    log::error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {}", e);
                    bot.send_message(
                        msg.chat.id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    )
                    .await?;
                }
            }
        }
        Some("/stats") => {
            if let Ok(today_document) = database_service.check_today_document().await {
                let user_id = msg.from.as_ref().unwrap().id.0 as i64;
                let user_vote = if today_document.votes_yes.contains(&user_id) {
                    "‚úÖ –í—ã —Å–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ó–ê –æ–ø–æ–∑–¥–∞–Ω–∏–µ"
                } else if today_document.votes_no.contains(&user_id) {
                    "‚ùå –í—ã —Å–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ü–†–û–¢–ò–í –æ–ø–æ–∑–¥–∞–Ω–∏—è"
                } else {
                    "‚ö†Ô∏è –í—ã —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏"
                };

                let votes_yes = today_document.votes_yes.len();
                let votes_no = today_document.votes_no.len();

                let result_position = if votes_yes > votes_no {
                    "üü¢ –°–µ–π—á–∞—Å –ø–æ–±–µ–∂–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—è: –û–ü–û–ó–î–ê–õ"
                } else if votes_no > votes_yes {
                    "üî¥ –°–µ–π—á–∞—Å –ø–æ–±–µ–∂–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—è: –ù–ï –û–ü–û–ó–î–ê–õ"
                } else {
                    "üü° –°–µ–π—á–∞—Å –Ω–∏—á—å—è –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"
                };

                let stats_message = format!(
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n\
                    –ó–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ: {} –≥–æ–ª–æ—Å–æ–≤\n\
                    –ü—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è: {} –≥–æ–ª–æ—Å–æ–≤\n\n\
                    –í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {} —á–µ–ª–æ–≤–µ–∫\n\
                    {}\n\n\
                    {}",
                    votes_yes,
                    votes_no,
                    votes_yes + votes_no,
                    result_position,
                    user_vote
                );

                let keyboard = InlineKeyboardMarkup::new(vec![vec![
                    InlineKeyboardButton::callback("‚úÖ –û–ø–æ–∑–¥–∞–ª", "late"),
                    InlineKeyboardButton::callback("‚ùå –ù–µ –æ–ø–æ–∑–¥–∞–ª", "unlate"),
                ]]);

                bot.send_message(msg.chat.id, stats_message)
                    .reply_markup(keyboard)
                    .await?;
            } else {
                bot.send_message(
                    msg.chat.id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                )
                .await?;
            }
        }
        Some("/get_chat_id") => {
            bot.send_message(msg.chat.id, format!("ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {}", msg.chat.id))
                .await?;
        }
        Some("/my_id") => {
            if let Some(user) = &msg.from {
                bot.send_message(
                    msg.chat.id,
                    format!("–í–∞—à ID: {}", user.id.0)
                ).await?;
            } else {
                bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID").await?;
            }
        }
        _ => {
            bot.send_message(
                msg.chat.id,
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, /late –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ, /unlate –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤, /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, /get_chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞, /my_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ ID"
            ).await?;
        }
    }
    Ok(())
}
