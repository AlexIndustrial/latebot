use mongodb::{
    bson::{doc, DateTime},
    options::ClientOptions,
    Client,
};
use serde::{Deserialize, Serialize};
use teloxide::prelude::*;
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup};
use teloxide::RequestError;
use std::env;
use database_actions::DatabaseService;

pub mod database_actions;

#[derive(Debug, Serialize, Deserialize)]
struct Vote {
    user_id: i64,
    username: String,
    is_late: bool,
    timestamp: DateTime,
}

#[tokio::main]
async fn main() {
    pretty_env_logger::init();
    log::info!("Starting late tracking bot...");

    let target_name = env::var("LATE_TARGET_NAME").unwrap_or_else(|_| "–ü–æ–≤–µ—Ä–∏–Ω–æ–≤".to_string());
    let notification_chat_id = env::var("NOTIFICATION_CHAT_ID").unwrap_or_else(|_| "0".to_string()).parse::<i64>().unwrap_or(0);
    let ping_user = env::var("PING_USER").unwrap_or_else(|_| "@Test".to_string());

    let database_service = database_actions::DatabaseServiceInner::new("mongodb://10.10.10.10:27017/").await;
    let bot = Bot::from_env();

    let handler = dptree::entry()
        .branch(Update::filter_message().endpoint(message_handler))
        .branch(Update::filter_callback_query().endpoint(handle_callback));

    Dispatcher::builder(bot, handler)
        .dependencies(dptree::deps![target_name, ping_user, database_service, notification_chat_id])
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}

async fn message_handler(
    bot: Bot,
    msg: Message,
    target_name: String,
    ping_user: String,
    database_service: DatabaseService,
    notification_chat_id: i64,
) -> Result<(), RequestError> {
    match msg.text() {
        Some("/start") => {
            let keyboard = InlineKeyboardMarkup::new(vec![
                vec![
                    InlineKeyboardButton::callback("‚úÖ –û–ø–æ–∑–¥–∞–ª", "late"),
                    InlineKeyboardButton::callback("‚ùå –ù–µ –æ–ø–æ–∑–¥–∞–ª", "unlate")
                ],
                vec![
                    InlineKeyboardButton::callback("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats")
                ]
            ]);

            bot.send_message(
                msg.chat.id,
                format!("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–π!\n\n\
                üïí –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –æ–ø–æ–∑–¥–∞–ª –ª–∏ —Å–µ–≥–æ–¥–Ω—è {}.\n\n\
                –ö–æ–º–∞–Ω–¥—ã:\n\
                /late - –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ\n\
                /unlate - –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è\n\
                /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\
                /get_chat_id - –ø–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n\n\
                ‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!", target_name)
            )
            .reply_markup(keyboard)
            .await?;
        }
        Some("/late") | Some("/unlate") => {
            let user_id = msg.from().unwrap().id;
            let username = msg.from().unwrap().username.clone().unwrap_or_else(|| "anonymous".to_string());
            let is_late = msg.text() == Some("/late");

            let _ = database_service.check_today_document().await;

            match database_service.vote(user_id.0 as i64, is_late).await {
                Ok(_) => {
                    let vote_type = if is_late { "–∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ" } else { "–ø—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è" };
                    bot.send_message(
                        msg.chat.id,
                        format!("‚úÖ –í–∞—à –≥–æ–ª–æ—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", vote_type),
                    ).await?;

                    if is_late {
                        if let Ok(total_late_days) = database_service.check_today_document().await {
                            if total_late_days.votes_yes.len() % 5 == 0 && notification_chat_id != 0 {
                                bot.send_message(
                                    ChatId(notification_chat_id),
                                    format!("üéâ {} –ß–µ–ª–æ–≤–µ–∫ —Å–æ–æ–±—â–∏–ª–∏, —á—Ç–æ {}({}) –æ–ø–æ–∑–¥–∞–ª! üéâüéâüéâüéâüéâ –î–∞–≤–∞–π—Ç–µ –µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–∏–º! üéâüéâüéâüéâüéâ ", total_late_days.votes_yes.len(),  target_name,ping_user,)
                                ).await?;
                            }
                        }
                    }
                }
                Err(e) => {
                    log::error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {}", e);
                    bot.send_message(
                        msg.chat.id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    ).await?;
                }
            }
        }
        Some("/stats") => {
            if let Ok(today_document) = database_service.check_today_document().await {
                let user_id = msg.from().unwrap().id.0 as i64;
                let user_vote = if today_document.votes_yes.contains(&user_id) {
                    "‚úÖ –í—ã —Å–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ó–ê –æ–ø–æ–∑–¥–∞–Ω–∏–µ"
                } else if today_document.votes_no.contains(&user_id) {
                    "‚ùå –í—ã —Å–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ü–†–û–¢–ò–í –æ–ø–æ–∑–¥–∞–Ω–∏—è"
                } else {
                    "‚ö†Ô∏è –í—ã —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏"
                };

                let stats_message = format!(
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n\
                    –ó–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ: {} –≥–æ–ª–æ—Å–æ–≤\n\
                    –ü—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è: {} –≥–æ–ª–æ—Å–æ–≤\n\n\
                    –í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {} —á–µ–ª–æ–≤–µ–∫\n\n\
                    {}",
                    today_document.votes_yes.len(),
                    today_document.votes_no.len(),
                    today_document.votes_yes.len() + today_document.votes_no.len(),
                    user_vote
                );
                
                let keyboard = InlineKeyboardMarkup::new(vec![
                    vec![
                        InlineKeyboardButton::callback("‚úÖ –û–ø–æ–∑–¥–∞–ª", "late"),
                        InlineKeyboardButton::callback("‚ùå –ù–µ –æ–ø–æ–∑–¥–∞–ª", "unlate")
                    ]
                ]);
                
                bot.send_message(msg.chat.id, stats_message)
                    .reply_markup(keyboard)
                    .await?;
            } else {
                bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").await?;
            }
        }
        Some("/get_chat_id") => {
            bot.send_message(
                msg.chat.id,
                format!("ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {}", msg.chat.id)
            ).await?;
        }
        _ => {
            bot.send_message(
                msg.chat.id,
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, /late –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ, /unlate –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤, /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, /stats_day YYYY-MM-DD –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ /get_chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞"
            ).await?;
        }
    }
    Ok(())
}

async fn handle_callback(bot: Bot, q: CallbackQuery, database_service: DatabaseService) -> Result<(), RequestError> {
    if let Some(data) = q.data {
        match data.as_str() {
            "late" | "unlate" => {
                let user_id = q.from.id.0 as i64;
                let is_late = data == "late";
                
                match database_service.vote(user_id, is_late).await {
                    Ok(_) => {
                        let vote_type = if is_late { "–∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ" } else { "–ø—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è" };
                        bot.answer_callback_query(q.id)
                            .text(format!("‚úÖ –í–∞—à –≥–æ–ª–æ—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", vote_type))
                            .await?;
                    }
                    Err(e) => {
                        log::error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {}", e);
                        bot.answer_callback_query(q.id)
                            .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                            .await?;
                    }
                }
            }
            "stats" => {
                if let Ok(today_document) = database_service.check_today_document().await {
                    let user_id = q.from.id.0 as i64;
                    let user_vote = if today_document.votes_yes.contains(&user_id) {
                        "‚úÖ –í—ã —Å–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ó–ê –æ–ø–æ–∑–¥–∞–Ω–∏–µ"
                    } else if today_document.votes_no.contains(&user_id) {
                        "‚ùå –í—ã —Å–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ü–†–û–¢–ò–í –æ–ø–æ–∑–¥–∞–Ω–∏—è"
                    } else {
                        "‚ö†Ô∏è –í—ã —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏"
                    };

                    let stats_message = format!(
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n\
                        –ó–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ: {} –≥–æ–ª–æ—Å–æ–≤\n\
                        –ü—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è: {} –≥–æ–ª–æ—Å–æ–≤\n\n\
                        –í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {} —á–µ–ª–æ–≤–µ–∫\n\n\
                        {}",
                        today_document.votes_yes.len(),
                        today_document.votes_no.len(),
                        today_document.votes_yes.len() + today_document.votes_no.len(),
                        user_vote
                    );
                    
                    let keyboard = InlineKeyboardMarkup::new(vec![
                        vec![
                            InlineKeyboardButton::callback("‚úÖ –û–ø–æ–∑–¥–∞–ª", "late"),
                            InlineKeyboardButton::callback("‚ùå –ù–µ –æ–ø–æ–∑–¥–∞–ª", "unlate")
                        ]
                    ]);
                    
                    bot.answer_callback_query(q.id).await?;
                    
                    if let Some(message) = q.message {
                        let chat = message.chat();
                        bot.send_message(chat.id, stats_message)
                            .reply_markup(keyboard)
                            .await?;
                        
                    }
                } else {
                    bot.answer_callback_query(q.id)
                        .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        .await?;
                }
            }
            _ => {}
        }
    }
    Ok(())
}
