use mongodb::{
    bson::{doc, DateTime},
    options::ClientOptions,
    Client,
};
use serde::{Deserialize, Serialize};
use teloxide::prelude::*;
use teloxide::RequestError;
use std::env;

pub mod database_actions;

#[derive(Debug, Serialize, Deserialize)]
struct Vote {
    user_id: i64,
    username: String,
    is_late: bool,
    timestamp: DateTime,
}

#[tokio::main]
async fn main() {
    pretty_env_logger::init();
    log::info!("Starting late tracking bot...");




    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let target_name = env::var("LATE_TARGET_NAME").unwrap_or_else(|_| "–ü–æ–≤–µ—Ä–∏–Ω–æ–≤".to_string());
    let notification_chat_id = env::var("NOTIFICATION_CHAT_ID").unwrap_or_else(|_| "0".to_string()).parse::<i64>().unwrap_or(0);
    let ping_user = env::var("PING_USER").unwrap_or_else(|_| "@Test".to_string());


    let database_service = database_actions::DatabaseServiceInner::new("mongodb://10.10.10.10:27017/").await;
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    

    let bot = Bot::from_env();

    


//     return;

    teloxide::repl(bot, move |bot: Bot, msg: Message| {
        let target_name = target_name.clone();
        let ping_user = ping_user.clone();
        let database_service = database_service.clone();
        async move {
            match msg.text() {
                Some("/start") => {
                    bot.send_message(
                        msg.chat.id,
                        format!("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–π!\n\n\
                        üïí –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –æ–ø–æ–∑–¥–∞–ª –ª–∏ —Å–µ–≥–æ–¥–Ω—è {}.\n\n\
                        –ö–æ–º–∞–Ω–¥—ã:\n\
                        /late - –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ\n\
                        /unlate - –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è\n\
                        /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\
                        /get_chat_id - –ø–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n\n\
                        ‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!", target_name)
                    ).await?;
                }
                Some("/late") | Some("/unlate") => {
                    let user_id = msg.from().unwrap().id;
                    let username = msg.from().unwrap().username.clone().unwrap_or_else(|| "anonymous".to_string());
                    let is_late = msg.text() == Some("/late");

                    let _ = database_service.check_today_document().await;

                    
                    match database_service.vote(user_id.0 as i64, is_late).await {
                        Ok(_) => {
                            let vote_type = if is_late { "–∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ" } else { "–ø—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è" };
                            bot.send_message(
                                msg.chat.id,
                                format!("‚úÖ –í–∞—à –≥–æ–ª–æ—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", vote_type)
                            ).await?;

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π, –µ—Å–ª–∏ –≥–æ–ª–æ—Å –±—ã–ª –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ
                            if is_late {
                                if let Ok(total_late_days) = database_service.check_today_document().await {
                                    if total_late_days.votes_yes.len() % 5 == 0 && notification_chat_id != 0 {
                                        bot.send_message(
                                            ChatId(notification_chat_id),
                                            format!("üéâ {} –ß–µ–ª–æ–≤–µ–∫ —Å–æ–æ–±—â–∏–ª–∏, —á—Ç–æ {}({}) –æ–ø–æ–∑–¥–∞–ª! üéâüéâüéâüéâüéâ –î–∞–≤–∞–π—Ç–µ –µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–∏–º! üéâüéâüéâüéâüéâ ", total_late_days.votes_yes.len(),  target_name,ping_user,)
                                        ).await?;
                                    }
                                }
                            }
                        }
                        Err(e) => {
                            log::error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {}", e);
                            bot.send_message(
                                msg.chat.id,
                                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            ).await?;
                        }
                    }
                }
                Some("/unlate") => {
                    let user_id = msg.from().unwrap().id;
                    let is_late = false;
                    
                    let _ = database_service.check_today_document().await;
                    match database_service.vote(user_id.0 as i64, is_late).await {
                        Ok(_) => {
                            bot.send_message(
                                msg.chat.id,
                                "‚úÖ –í–∞—à –≥–æ–ª–æ—Å –ø—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
                            ).await?;
                        }
                        Err(e) => {
                            log::error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {}", e);
                            bot.send_message(
                                msg.chat.id,
                                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            ).await?;
                        }
                    }
                }
                Some("/stats") => {
                    if let Ok(today_document) = database_service.check_today_document().await {
                        let stats_message = format!(
                            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n\
                            –ó–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ: {} –≥–æ–ª–æ—Å–æ–≤\n\
                            –ü—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è: {} –≥–æ–ª–æ—Å–æ–≤\n\n\
                            –í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {} —á–µ–ª–æ–≤–µ–∫",
                            today_document.votes_yes.len(),
                            today_document.votes_no.len(),
                            today_document.votes_yes.len() + today_document.votes_no.len()
                        );
                    bot.send_message(msg.chat.id, stats_message).await?;
                    } else {
                        bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").await?;
                    }
                }
                Some(text) if text.starts_with("/stats_day") => {
                    let args: Vec<&str> = text.split_whitespace().collect();
                    if args.len() != 2 {
                        bot.send_message(
                            msg.chat.id,
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /stats_day YYYY-MM-DD\n–ù–∞–ø—Ä–∏–º–µ—Ä: /stats_day 2024-03-20"
                        ).await?;
                        return Ok(());
                    }

                    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                    let date_parts: Vec<&str> = args[1].split('-').collect();
                    if date_parts.len() != 3 {
                        bot.send_message(
                            msg.chat.id,
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"
                        ).await?;
                        return Ok(());
                    }

                    let year = date_parts[0].parse::<i32>().unwrap_or(0);
                    let month = date_parts[1].parse::<u8>().unwrap_or(0);
                    let day = date_parts[2].parse::<u8>().unwrap_or(0);

                    if year == 0 || month == 0 || day == 0 {
                        bot.send_message(
                            msg.chat.id,
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"
                        ).await?;
                        return Ok(());
                    }

                    // –°–æ–∑–¥–∞–µ–º DateTime –Ω–∞ –Ω–∞—á–∞–ª–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
                    let date = DateTime::from_millis(
                        chrono::NaiveDate::from_ymd_opt(year as i32, month as u32, day as u32)
                            .unwrap_or_else(|| chrono::NaiveDate::from_ymd(1970, 1, 1))
                            .and_hms_opt(0, 0, 0)
                            .unwrap()
                            .timestamp_millis()
                    );

                    match database_service.get_day_stats(date).await {
                        Ok(day) => {
                            let stats_message = format!(
                                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {}:\n\n\
                                –ó–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ: {} –≥–æ–ª–æ—Å–æ–≤\n\
                                –ü—Ä–æ—Ç–∏–≤ –æ–ø–æ–∑–¥–∞–Ω–∏—è: {} –≥–æ–ª–æ—Å–æ–≤\n\n\
                                –í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {} —á–µ–ª–æ–≤–µ–∫",
                                args[1],
                                day.votes_yes.len(),
                                day.votes_no.len(),
                                day.votes_yes.len() + day.votes_no.len()
                            );
                            bot.send_message(msg.chat.id, stats_message).await?;
                        }
                        Err(_) => {
                            bot.send_message(
                                msg.chat.id,
                                "‚ùå –î–æ–∫—É–º–µ–Ω—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω"
                            ).await?;
                        }
                    }
                }
                Some("/get_chat_id") => {
                    bot.send_message(
                        msg.chat.id,
                        format!("ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {}", msg.chat.id)
                    ).await?;
                }
                _ => {
                    bot.send_message(
                        msg.chat.id,
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, /late –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ, /unlate –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤, /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, /stats_day YYYY-MM-DD –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ /get_chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞"
                    ).await?;
                }
            }
            Ok(())
        }
    })
    .await;
}
